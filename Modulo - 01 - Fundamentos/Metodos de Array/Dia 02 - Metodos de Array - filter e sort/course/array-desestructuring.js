//Como arrays s√£o objetos iter√°veis, que t√™m algumas similaridades com os objetos em JavaScript, voc√™ pode estar se perguntando: ser√° que a desestrutura√ß√£o tamb√©m se aplica a arrays? ü§î

//Esse questionamento √© v√°lido, e a resposta √©: SIM! Podemos desestruturar arrays da mesma forma que desestruturamos objetos usando a nota√ß√£o para array destructuring.

//Com a array destructuring, voc√™ pode especificar quais elementos do array deseja extrair e criar vari√°veis correspondentes a esses elementos em uma √∫nica linha de c√≥digo.

//Vejamos o exemplo abaixo, onde temos um esquema de transa√ß√µes banc√°rias:

// Fun√ß√£o para processar uma transa√ß√£o banc√°ria
const processTransaction = (transaction) => {
    const [type, amount] = transaction;
    //console.log(type, amount);
  
    if (type === 'deposit') {
      performDeposit(amount);
    } else if (type === 'withdrawal') {
      performWithdrawal(amount);
    } else {
      console.log('Tipo de transa√ß√£o inv√°lida.');
    }
  };
    
  // Fun√ß√£o para realizar um dep√≥sito
  const performDeposit = (amount) => {
    console.log(`Dep√≥sito de ${amount} realizado com sucesso.`);
  };
  
  // Fun√ß√£o para realizar um saque
  const performWithdrawal = (amount) => {
    console.log(`Saque de ${amount} realizado com sucesso.`);
  };
  
  // Chamadas da fun√ß√£o processTransaction
  processTransaction(['deposit', 1000]); // Dep√≥sito de 1000 realizado com sucesso.
  processTransaction(['withdrawal', 500]); // Saque de 500 realizado com sucesso.
  processTransaction(['golpe', 1000000]); // Tipo de transa√ß√£o inv√°lida.


  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  const person = {
    name: 'Jo√£o',
    lastName: 'Cavernoso',
    age: 22,
  };
  
  const { nationality } = person;
  console.log(nationality);


//Essa desestrutura√ß√£o funciona? E se funciona, qual o valor que aparece se fizer console.log(nationality)? Copie esse c√≥digo e verifique o que ser√° impresso. üòâ
//Quando tentamos acessar uma propriedade que n√£o existe, o valor retornado √© undefined. E se voc√™ quisesse dar um valor padr√£o para alguma chave, caso essa propriedade n√£o existisse no objeto?
//Voc√™ consegue atribuir esse valor padr√£o utilizando default destructuring, que √© mais um recurso do ES6. Veja o exemplo:

const person1 = {
    name: 'Jo√£o',
    lastName: 'Cavernoso',
    age: 22,
  };
  
const { nationality1 = 'Zimbabwean' } = person1;
console.log(nationality1); // Zimbabwean


